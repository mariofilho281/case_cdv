"""
Wind Turbine Power vs. Rotor Diameter Quadratic Model Fitting

This script fits a simple physical model relating wind turbine power output to
rotor diameter using quadratic regression. The model is based on the physical
principle that turbine power is proportional to the swept area of the
blades [1], which scales with the square of the rotor diameter.

Model Form:
    P = α × D²
where:
    P: Power output (MW)
    D: Rotor diameter (m)
    α: Scaling parameter to be fitted

The script performs the following operations:
    1. Loads turbine data from a CSV file containing rotor diameters and power ratings
    2. Fits the quadratic model using linear least squares regression
    3. Calculates the R² coefficient to evaluate model fit
    4. Prints the best-fit parameters and goodness-of-fit statistics
    5. Generates a visualization comparing raw data with the fitted curve

Usage:
    Simply run the script to fit the model and display results:
    $ python power_model.py

Outputs:
    - Console output: Best-fit parameters and R² value
    - Interactive plot: Scatter plot of data with fitted curve

Notes:
    With such a simple model, there is hardly any need to worry about the
    bias-variance tradeoff, since it is unlikely to overfit the data. Moreover,
    the plot generated by the script shows that the model fits the data
    reasonably well, considering that some variation from this simple model is
    expected if one accounts for other factors such as wind speed.

    For future work, it would be nice to investigate more sophisticated models
    with features engineered from meteorological data for each location.

References:
[1] https://kirkwood.pressbooks.pub/windenergy/chapter/theoretical-power-of-wind/
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

if __name__ == '__main__':
    turbine_data = pd.read_csv('../outputs/output.csv', index_col='OBJECTID')
    diameter = turbine_data['DIAM_ROTOR']
    power = turbine_data['POT_MW']

    regressors = np.atleast_2d(diameter**2).T
    parameters, squared_residuals, _, _ = np.linalg.lstsq(regressors, power)
    r_squared = 1 - (squared_residuals[0] / np.sum((power - power.mean())**2))
    print(f'Best fit:\n'
          f'power = {parameters[0]:.6f} * diameter^2\n'
          f'R² = {r_squared}.')

    diameter_fit = np.linspace(0, 225, 40)
    power_fit = parameters[0] * diameter_fit**2
    plt.plot(diameter, power, '.', diameter_fit, power_fit, '--')
    plt.grid()
    plt.show()
